#!/usr/bin/env ruby
require 'gli'
require 'suploy'

#rescue LoadError
#  STDERR.puts "In development, you need to use `bundle exec bin/suploy-scli` to run your app"
#  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#  STDERR.puts "Feel free to remove this message from bin/suploy-scli now"
#  exit 64
#end

include GLI::App

program_desc 'Describe your application here'

version Suploy::VERSION

desc 'Manage your SSH Keys'
command :key do |c|
  c.arg_name '[key-name] [key-file]'
  c.desc 'Add an SSH Key to your suploy account'
  c.command :add do |add|
    add.action do |global_options,options,args|
      key_file = args[0]
      key_file ||= '~/.ssh/id_rsa.pub'
      key_file = File.expand_path(key_file)
      if File.file? key_file
        print "Adding key-file '#{key_file}' ... "
        file = File.open(key_file, 'rb')
        key_content = file.read
        key_name = key_content.split.last
        Suploy::Api::SshKey.create key_name, key_content
        file.close
        puts "Done"
      else
        puts "Key-file '#{key_file}' does not exist."
      end
    end
  end

  c.desc 'List all your SSH Keys added to your account'
  c.command :list do |add|
    add.action do |global_options,options,args|
      ssh_keys = Suploy::Api::SshKey.index
      if ssh_keys.size > 0
        table = Terminal::Table.new do |t|
          t << ['Name', 'Fingerprint']
          t.add_separator
          ssh_keys.each do |k|
            t << [k.info["title"], k.info["fingerprint"]]
          end
        end
        puts table
      else
        puts "You have not added an SSH Key yet, why don't you do so..?"
      end
    end
  end

  c.arg_name 'key-name'
  c.desc 'Remove a previously added SSH Key from your suploy account'
  c.command :rm do |add|
    add.action do |global_options,options,args|
      if args.size > 0
        key_name = args[0]
        print "Remove key '#{key_name}' ... "
        ssh_key = Suploy::Api::SshKey.get key_name
        ssh_key.remove
        puts "Done"
      else
        puts "You must provide a SSH Key name to delete."
      end
    end
  end
end

desc 'Initialize your app'
arg_name '[app-name]'
command :init do |c|
  c.action do |global_options,options,args|
    if args.size == 1
      Suploy::App.init(args[0])
    else
      puts "You have to provide a name for an app to be created."
    end
  end
end

desc 'Show information about your app'
command :info do |c|
  c.action do |global_options,options,args|
    app = Suploy::App.info
    puts "App:"
    puts "  Name: #{app.info['name']}"
    puts "  Status: #{app.info['status']}"
    puts "  Repo: #{app.info['repository']}"
  end
end

desc 'Show all apps'
arg_name '[app-name]'
command :apps do |c|
  c.action do |global_options,options,args|
    apps = Suploy::App.index
    if apps.size > 0
      table = Terminal::Table.new do |t|
        t << ['Name', 'Status', 'Git']
        t.add_separator
        apps.each do |k|
          t << [k.info["name"], k.info["status"], k.info["repository"]]
        end
      end
      puts table
    else
      puts "You have not created an app yet, why don't you do so..?"
    end
  end
end

desc 'Describe login here'
arg_name 'Describe arguments to login here'
command :login do |c|
  c.action do |global_options,options,args|
    Suploy::Auth.ask_for_and_save_credentials
  end
end

desc 'Configure the suploy client'
command :config do |c|
  c.arg_name '[url to your suploy instance]'
  c.desc 'Configure the url to your suploy instance'
  c.command :url do |add|
    add.action do |global_options,options,args|
      url = args[0]
      Suploy::Config.url = url
      puts "Url of your suploy instace has been set to #{url}"
    end
  end
end

pre do |global,command,options,args|
  Suploy::Config.load
  Suploy::Api.url = Suploy::Config.url

  commands_requiring_auth = ['key', 'init', 'info', 'apps']
  parent_most_command = command.topmost_ancestor.names
  if commands_requiring_auth.include? parent_most_command
    token = Suploy::Auth.get_credentials.token
    Suploy::Api.authorization token
  end
  true
end

post do |global,command,options,args|
end

on_error do |exception|
  true
end

exit run(ARGV)
