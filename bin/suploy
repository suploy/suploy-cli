#!/usr/bin/env ruby
require 'gli'
require 'suploy'

#rescue LoadError
#  STDERR.puts "In development, you need to use `bundle exec bin/suploy-scli` to run your app"
#  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#  STDERR.puts "Feel free to remove this message from bin/suploy-scli now"
#  exit 64
#end

include GLI::App

program_desc 'Describe your application here'

version Suploy::VERSION

desc 'Manage your SSH Keys'
command :key do |c|
  c.arg_name '[key-name] [key-file]'
  c.desc 'Add an SSH Key to your suploy account'
  c.command :add do |add|
    add.action do |global_options,options,args|
      key_name = args[0]
      key_file = args[1]
      key_file ||= '~/.ssh/id_rsa.pub'
      key_file = File.expand_path(key_file)
      if File.file? key_file
        puts "Adding key-file '#{key_file}' ..."
        file = File.open(key_file, 'rb')
        puts file.read
        # add suploy api call to actually add the key
        file.close
      else
        puts "Key-file '#{key_file}' does not exist"
      end
    end
  end
end

desc 'Initialize your app'
arg_name '[app-name]'
command :init do |c|
  c.action do |global_options,options,args|
    Suploy::App.init
  end
end

desc 'Describe login here'
arg_name 'Describe arguments to login here'
command :login do |c|
  c.action do |global_options,options,args|
    require "highline/import"
    puts "Provide your email and password to login."
    email = ask("Enter your email:")
    password = ask("Enter your password:") { |q| q.echo = "x" }

    puts "#{email}:#{password}"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
